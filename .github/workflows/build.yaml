name: Build
on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

jobs:
  build:
    name: Build Binary (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            unwind: true
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            unwind: true
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            unwind: false
          - target: aarch64-apple-darwin
            os: macos-latest
            unwind: false
          - target: x86_64-apple-darwin
            os: macos-13
            unwind: false
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        with:
          version: 9
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install pkgconfig dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install libunwind-dev build-essential liblzma-dev -y
          echo 'RUSTFLAGS=-C link-arg=-llzma' >> $GITHUB_ENV

      - name: Build
        run: |
          cargo build --release ${{ matrix.unwind && '--features unwind' || '' }} --target ${{ matrix.target }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/py-crude-resource-monitor
            target/${{ matrix.target }}/release/py-crude-resource-monitor.exe

  build-static-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: pnpm/action-setup@v4
        with:
          version: 9
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-musl

      - name: Build prontend
        run: |
          # The build.rs does not work in alpine, so we need to do this manually
          cd frontend
          pnpm install
          pnpm build

      - name: Build main program
        run: |
          # We skip the frontend build here, as we already did it and it does not work in alpine
          docker run --rm -v "$PWD:/work" ghcr.io/benfred/rust-musl-cross:x86_64-unknown-linux-musl \
            bash -c 'cd /work && SKIP_FRONTEND_BUILD=yes cargo build --release --features unwind --target x86_64-unknown-linux-musl'

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-x86_64-unknown-linux-musl
          path: |
            target/x86_64-unknown-linux-musl/release/py-crude-resource-monitor
